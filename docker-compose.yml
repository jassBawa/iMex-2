services:
  api:
    build:
      context: ./
      dockerfile: './docker/api.dockerfile'
      args:
        - DATABASE_URL=${DATABASE_URL}
    ports:
      - '4000:4000'
    env_file: 'env.dockercompose/.env.backend'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  ws:
    build:
      context: ./
      dockerfile: './docker/ws.dockerfile'
    ports:
      - '8080:8080'
    env_file: 'env.dockercompose/.env.web-socket'
    depends_on:
      redis:
        condition: service_healthy

  engine:
    build:
      context: ./
      dockerfile: './docker/engine.dockerfile'
      args:
        # Removed the extra space here
        - DATABASE_URL=${DATABASE_URL}
    env_file: 'env.dockercompose/.env.engine'
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy

  poller:
    build:
      context: ./
      dockerfile: './docker/poller.dockerfile'
    env_file: 'env.dockercompose/.env.poller'
    depends_on:
      redis:
        condition: service_healthy

  db:
    image: postgres:15
    container_name: imex-postgres
    restart: always
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    container_name: imex-redis
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo:
    image: mongo:6.0
    container_name: imex-mongo
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data:
  redis_data:
  mongo_data:
